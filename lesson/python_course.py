# -*- coding: utf-8 -*-
"""Python_Course.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjit8Aj5w6ViWWMaRVXNyGIPTszLxzAh

**Escape Characters**
"""

print('"Isn\'t," she said.')

print('"Isn't", she said.')

s = 'First line. \nSecond line.'
print(s)

"""**Displaying String**"""

print(r'C:\some\name')

print('C:\some\name')

"""**Multi-Line String Litereals**"""

s = """
muti-line
text!
"""
print(s)

s = """\
muti-line
text!\
"""
print(s)

"""**Concatenation**"""

print('Py' + 'thon')

triple_python = 'Py' 'thon' ' '
print(3*triple_python)

print('Py' 'thon')

prefix = 'Py'
print(prefix + 'thon')

prefix = 'Py'
prefix 'thon'

"""**String Indexing**"""

fruit = 'banana'
print(fruit[0])
print(fruit[1])
print(fruit[5])

fruit = 'banana'
print(fruit[6])

"""**String Indexing[2]**"""

fruit = 'banana'
print(fruit[1.5])

fruit = 'banana'
length = len(fruit)
print("length = ", length)
print("Last character of fruit = ", fruit[length-1]) #พิมพ์อักษระตัวสุดท้ายของ fruit

"""**String Indexing[3]**"""

word = 'Python'
print(word[-1])
print(word[-2])
print(word[-6])

word = 'Python'
print(word[-7])

"""**Slicing**"""

word = 'Python'
print(word[0:2])
print(word[2:5])

word = 'Python'
print(word[-6:-4])
print(word[0:6])

"""**Slicing[2]**"""

word = 'Python'
print(word[:])
print(word[:2] + word[2:])
print(word[:2])
print(word[4:])
print(word[-2:])

"""**Slicing[3]**"""

word = 'Python'
print(word[42])

word = 'Python'
print(word[4:42])
print(word[42:])

"""**Slicing[4]**"""

word = 'Hello Python'
print(word[2:9:2])
print(word[len(word)-1::-1])
print(word[len(word)::-1])

"""**immutability**"""

word = 'Hello Python'
word[5] = '-'

word = 'Hello Python'
word_n = word[0:5] + '-' + word[6:]
print(word_n)

word = 'Hello'
word1 = 'Python'
word = word + '-' + word1
print(word)

word = 'Hello'
word1 = 'Python'
word = '-'.join([word, word1])
print(word)

"""**Traversal with a while Loop**"""

fruit = "banana"
index = 0

while index < len(fruit):
      letter = fruit[index]
      print(letter)
      index = index + 1

"""**Traversal with a for Loop with indexes**"""

s = "abcd"
length = len(s)
for i in range(length):
  print(i, s[i])

"""**Traversal with a for Loop without indexes**"""

s = "abcd"
for c in s: #คล้ายกับ for i in range(n)
    print(c)

"""**Searching operator**"""

def find(word, letter):
  index = 0
  while index < len(word):
      if word[index] == letter:
          return index
      index = index + 1
          return -1

print(find("Hello Kitty", 'H'))
print(find("Hello Kitty", 'h'))

"""**Practice**"""

def find(word, letter, start_indx):
      index = start_indx
      while index < len(word):
          if word[index] == letter:
            return index
          index = index + 1
          return -1

print("Find 'H' in 'Hello Kitty' start from index 1: ")
print(find("Hello Kitty", 'H', 1))
print("Find 'H' in 'Hello Kitty' Start from index 0" )
print(find("Hello Kitty", 'H', 0))

"""**Example: Looping and Counting**"""

def count_letter(word, key):
  count = 0

  for letter in word:
      if letter == key:
          count = count + 1
  return count

print(count_letter('banana', 'a'))

"""**The in Operator**"""

print('a' in 'banana')
print('z' not in 'banana')
print('na' in 'banana')
print('seed' in 'banana')
print('a ' in 'banana')

def in_both(word1, word2):
  for letter in word1:
    if letter in word2:
      print(letter)

in_both("orange", "apple")

"""**String Comparison**"""

print('bat' <= 'cat')
print('rat' < 'cat')
print('apple' < 'Apple')

"""**String-related Built-in Function**"""

print(bin(3
          ))
print(chr(97))
print(eval('1 + 1'))
print(hex(18))
print(oct(9))
print(ord('a'))

print(str(18))
print(str(0x35))
print(str(None))
print(str(print))

"""**String Constants**"""

import string
print(string.digits)

"""**Basic String Methods**"""

word = 'banana'
new_word = word.upper()
print(new_word)

"""**Basic String Methods [2]**"""

print('banana'.count('na'))
print('banana'.count('aa'))
print('Quadruple'.endswith('uple'))
print('str123'.isalpha())
print('abc'.isalpha())
print('str123'.isdigit())
print('AbC'.islower())
print('abc'.islower())

"""**Basic String Methods [3]**"""

print(''.isspace())
print(' '.isspace())
print('Abc'.isupper())
print('ABC'.isupper())
print('banana'.replace('na','NA'))
print('banana'.replace('na','NA',1))
print('Abc'.upper())
print('Abc'.lower())

"""**Basic String Methods [4]**"""

print('1,2,3'.split(','))
print('1,2,3,4,5,6'.split(',', maxsplit=1))
print('1,2,3,4,5,6'.split(',', maxsplit=3))
print('1,2,3, '.split(','))

print('banana'.startswith('ba'))
print('www.example.com'.strip('cmowz.'))
print('www.example.com'.lstrip('cmowz.'))
print('www.example.com'.rstrip('cmowz.'))
print('   spacious    '.strip())
print('   spacious    '.lstrip())
print('   spacious    '.rstrip())

"""**Basic String Methods [5]**"""

s = """
This is a sample
multi-line
string
"""

print("Line with splitlines():")
for line in s.splitlines():
  print(" line:", line)

print("==================")

print("Line with splitLine(True):")
for line in s.splitlines(True):
  print(" line:", line)

import numpy as np
import pandas as pd
data = pd.Series([1., -99., 2., -99., 4.])
data.replace(-99, np.nan)
